cabal-version:  2.2
name:           AlignmentAlgorithms
version:        0.1.1.0
author:         Christian Hoener zu Siederdissen, 2013-2019
copyright:      Christian Hoener zu Siederdissen, 2013-2019
homepage:       https://github.com/choener/AlignmentAlgorithms
bug-reports:    https://github.com/choener/AlignmentAlgorithms/issues
maintainer:     choener@bioinf.uni-leipzig.de
category:       Algorithms, Data Structures, Bioinformatics, Linguistics
license:        BSD-3-Clause
license-file:   LICENSE
build-type:     Simple
stability:      experimental
tested-with:    GHC == 8.4.4
synopsis:       Collection of alignment algorithms
description:
                <http://www.bioinf.uni-leipzig.de/Software/gADP/ generalized Algebraic Dynamic Programming>
                .
                A selection of (sequence) alignment algorithms. Both terminal,
                and syntactic variables, as well as the index type is not fixed
                here. This makes it possible to select the correct structure of
                the grammar here, but bind the required data type for alignment
                in user code.
                .
                That being said, these algorithms are mostly aimed towards
                sequence alignment problems.
                .
                List of grammars for sequences:
                .
                * global alignment
                  * linear scoring: Needleman-Wunsch style
                  .
                  * affine scoring: Gotoh
                .
                * semiglobal alignment
                  * overhang alignment
                .
                List of grammar for trees:
                .
                * global alignment
                  * linear scoring
                  .
                  * affine scoring
                  .
                  * simplified affine scoring
                .
                * global editing
                  * linear scoring
                .
                We now provide tree alignment and editing algorithms as well.
                We do not depend on ADPfusionForest to achieve this because
                grammar rules are completely disconnected from the underlying
                ADPfusion machinery.



Extra-Source-Files:
  README.md
  changelog.md



flag llvm
  description:  use llvm
  default:      False
  manual:       True



common deps
  build-depends: base             >= 4.7      && < 5.0
               , bytestring
               , containers       >= 0.5
               , fmlist           >= 0.9
               , vector           >= 0.10
               , text             >= 1.0
               --
               , ADPfusion        == 0.6.0.*
               , FormalGrammars   == 0.3.1.*
               , GrammarProducts  == 0.1.1.*
               , PrimitiveArray   == 0.9.1.*
               , SciBaseTypes     == 0.1.0.*
  default-language:
    Haskell2010
  default-extensions: BangPatterns
                    , DataKinds
                    , FlexibleContexts
                    , FlexibleInstances
                    , MultiParamTypeClasses
                    , PolyKinds
                    , QuasiQuotes
                    , TemplateHaskell
                    , TypeApplications
                    , TypeFamilies
                    , TypeOperators
                    , UnicodeSyntax
  ghc-options:
    -O2 -funbox-strict-fields



library
  import:
    deps
  exposed-modules:
    Data.Vector.Align.Global.Linear2
    DP.HMM.States2
    DP.Seq.Align.Global.Affine2
    DP.Seq.Align.Global.Linear2
    DP.Seq.Align.SemiGlobal.Infix2
    DP.Tree.Align.Global.Affine2
    DP.Tree.Align.Global.AffineSmall2
    DP.Tree.Align.Global.Linear2
    DP.Tree.Edit.Global.Linear2
    Data.Text.Levenshtein



test-suite properties
  type:
    exitcode-stdio-1.0
  main-is:
    properties.hs
  ghc-options:
    -threaded -rtsopts -with-rtsopts=-N
  hs-source-dirs:
    tests
  default-language:
    Haskell2010
  default-extensions: BangPatterns
--                    , CPP
--                    , FlexibleContexts
--                    , FlexibleInstances
--                    , MultiParamTypeClasses
--                    , ScopedTypeVariables
--                    , TemplateHaskell
--                    , TypeFamilies
--                    , TypeOperators
--                    , TypeSynonymInstances
  cpp-options:
    -DADPFUSION_TEST_SUITE_PROPERTIES
  build-depends: base
--               , ADPfusion
--               , bits
--               , OrderedBits
--               , PrimitiveArray
--               , QuickCheck
--               , strict
--               , tasty                        >= 0.11
--               , tasty-quickcheck             >= 0.8
--               , tasty-th                     >= 0.1
--               , vector



benchmark text-metrics
  import:
    deps
  type:
    exitcode-stdio-1.0
  build-depends: base
               , text-metrics
               , criterion      >= 1.4
               --
               , AlignmentAlgorithms
  hs-source-dirs:
    tests
  main-is:
    levenshtein.hs
  ghc-options:
    -flate-dmd-anal
    -fspec-constr-keen
    -fspec-constr-recursive=10
  if flag(llvm)
    ghc-options:
      -fllvm
      -optlo-O3



source-repository head
  type: git
  location: git://github.com/choener/AlignmentAlgorithms

